# мне искренне непонятно почему дисперсии интервал должен быть симметричным


from math import sqrt
# from scipy.stats import t, chi2
# [print(str(i) + " : " + str(t.ppf(0.975, i-1)) + ",")
#  for i in range(5, 21)]
# [print(str(i) + " : " + str(chi2.ppf(0.025, i-1)) + ",")
#  for i in range(5, 21)]
# [print(str(i) + " : " + str(chi2.ppf(0.975, i-1)) + ",")
#  for i in range(5, 21)]

c_t = {5: 2.7764451051977987,
       6: 2.5705818366147395,
       7: 2.4469118487916806,
       8: 2.3646242510102993,
       9: 2.3060041350333704,
       10: 2.2621571627409915,
       11: 2.2281388519649385,
       12: 2.200985160082949,
       13: 2.1788128296634177,
       14: 2.1603686564610127,
       15: 2.1447866879169273,
       16: 2.131449545559323,
       17: 2.1199052992210112,
       18: 2.1098155778331806,
       19: 2.10092204024096,
       20: 2.093024054408263}

c_chi2_l = {5: 0.4844185570879299,
            6: 0.8312116134866625,
            7: 1.2373442457912027,
            8: 1.689869180677355,
            9: 2.1797307472526497,
            10: 2.7003894999803584,
            11: 3.2469727802368413,
            12: 3.8157482522360993,
            13: 4.4037885069817015,
            14: 5.00875051181033,
            15: 5.628726103039731,
            16: 6.262137795043253,
            17: 6.907664353497003,
            18: 7.564186449577567,
            19: 8.230746194756668,
            20: 8.906516481987971}

c_chi2_r = {5: 11.143286781877796,
            6: 12.832501994030027,
            7: 14.44937533544792,
            8: 16.012764274629326,
            9: 17.534546139484647,
            10: 19.02276779864163,
            11: 20.483177350807388,
            12: 21.9200492610212,
            13: 23.33666415864534,
            14: 24.735604884931547,
            15: 26.11894804503737,
            16: 27.488392863442975,
            17: 28.845350723404753,
            18: 30.19100912163982,
            19: 31.526378440386626,
            20: 32.85232686172969}


n = int(input())
v = list(map(int, input().split()))

mean = sum(v)/n


s2 = sum([(x - mean) ** 2 for x in v]) / n


var_center = sqrt(s2*n/(n-1))


mu4 = sum([(x - mean) ** 4 for x in v]) / n


# p = sqrt(sqrt(1/n*(mu4-(n-3)/n-1)*var_center**4))/var_center


p = 1/(2*var_center) * sqrt(1/n*(mu4-(n-3)/(n-1)*var_center**4))


print("{:.3f}".format(mean - sqrt(s2)/sqrt(n-1) * c_t[n]),
      "{:.3f}".format(mean + sqrt(s2)/sqrt(n-1) * c_t[n]))

# print(mean - sqrt(s2)/sqrt(n-1)*c_t[n],  mean + sqrt(s2)/sqrt(n-1)*c_t[n])
# print(sqrt(s2*n/(n-1)))
print(p)
if (1-6.4/n >= 0):
    print("{:.3f}".format(sqrt(s2*n/(n-1)) * (1-6.4/n)),
          "{:.3f}".format(sqrt(s2*n/(n-1))*(1+6.4/n)))
    # print(sqrt(s2*n/(n-1)) * (1-6.4/n), sqrt(s2*n/(n-1))*(1+6.4/n))
else:
    print("{:.3f}".format(0), "{:.3f}".format(sqrt(s2*n/(n-1))*(2*6.4/n)))


# print("{:.3f}".format(), "{:.3f}".format())


# print(sqrt(s2))
# print(sqrt(n*s2 / c_chi2_r[n]),  sqrt(n*s2 / c_chi2_l[n]))
